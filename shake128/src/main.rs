mod keccack;
mod shake128;
mod sponge;
mod state;

fn main() {
    let args: Vec<String> = std::env::args().collect();
    if args.len() <= 1 {
        eprintln!("Usage: shake128 <d>");
        std::process::exit(1);
    }

    let d: usize = args[1].parse().expect("Please enter a valid number");

    let result = shake128::from_stdin(d);

    for i in 0..d {
        print!("{:02x}", result[i]);
    }
    println!();
}

// cf https://github.com/XKCP/XKCP/blob/master/tests/TestVectors/KeccakSpongeIntermediateValues_SHAKE128.txt
#[cfg(test)]
mod tests {
    use crate::shake128;

    #[test]
    fn input_empty() {
        let result = shake128::from(&[], 32);
        assert_eq!(
            result,
            [
                0x7f, 0x9c, 0x2b, 0xa4, 0xe8, 0x8f, 0x82, 0x7d, 0x61, 0x60, 0x45, 0x50, 0x76, 0x05,
                0x85, 0x3e, 0xd7, 0x3b, 0x80, 0x93, 0xf6, 0xef, 0xbc, 0x88, 0xeb, 0x1a, 0x6e, 0xac,
                0xfa, 0x66, 0xef, 0x26
            ]
        )
    }

    #[test]
    fn input_large() {
        let input = vec![0xa3; 200];
        let result = shake128::from(&input, 512);
        assert_eq!(
            result,
            [
                0x13, 0x1a, 0xb8, 0xd2, 0xb5, 0x94, 0x94, 0x6b, 0x9c, 0x81, 0x33, 0x3f, 0x9b, 0xb6,
                0xe0, 0xce, 0x75, 0xc3, 0xb9, 0x31, 0x04, 0xfa, 0x34, 0x69, 0xd3, 0x91, 0x74, 0x57,
                0x38, 0x5d, 0xa0, 0x37, 0xcf, 0x23, 0x2e, 0xf7, 0x16, 0x4a, 0x6d, 0x1e, 0xb4, 0x48,
                0xc8, 0x90, 0x81, 0x86, 0xad, 0x85, 0x2d, 0x3f, 0x85, 0xa5, 0xcf, 0x28, 0xda, 0x1a,
                0xb6, 0xfe, 0x34, 0x38, 0x17, 0x19, 0x78, 0x46, 0x7f, 0x1c, 0x05, 0xd5, 0x8c, 0x7e,
                0xf3, 0x8c, 0x28, 0x4c, 0x41, 0xf6, 0xc2, 0x22, 0x1a, 0x76, 0xf1, 0x2a, 0xb1, 0xc0,
                0x40, 0x82, 0x66, 0x02, 0x50, 0x80, 0x22, 0x94, 0xfb, 0x87, 0x18, 0x02, 0x13, 0xfd,
                0xef, 0x5b, 0x0e, 0xcb, 0x7d, 0xf5, 0x0c, 0xa1, 0xf8, 0x55, 0x5b, 0xe1, 0x4d, 0x32,
                0xe1, 0x0f, 0x6e, 0xdc, 0xde, 0x89, 0x2c, 0x09, 0x42, 0x4b, 0x29, 0xf5, 0x97, 0xaf,
                0xc2, 0x70, 0xc9, 0x04, 0x55, 0x6b, 0xfc, 0xb4, 0x7a, 0x7d, 0x40, 0x77, 0x8d, 0x39,
                0x09, 0x23, 0x64, 0x2b, 0x3c, 0xbd, 0x05, 0x79, 0xe6, 0x09, 0x08, 0xd5, 0xa0, 0x00,
                0xc1, 0xd0, 0x8b, 0x98, 0xef, 0x93, 0x3f, 0x80, 0x64, 0x45, 0xbf, 0x87, 0xf8, 0xb0,
                0x09, 0xba, 0x9e, 0x94, 0xf7, 0x26, 0x61, 0x22, 0xed, 0x7a, 0xc2, 0x4e, 0x5e, 0x26,
                0x6c, 0x42, 0xa8, 0x2f, 0xa1, 0xbb, 0xef, 0xb7, 0xb8, 0xdb, 0x00, 0x66, 0xe1, 0x6a,
                0x85, 0xe0, 0x49, 0x3f, 0x07, 0xdf, 0x48, 0x09, 0xae, 0xc0, 0x84, 0xa5, 0x93, 0x74,
                0x8a, 0xc3, 0xdd, 0xe5, 0xa6, 0xd7, 0xaa, 0xe1, 0xe8, 0xb6, 0xe5, 0x35, 0x2b, 0x2d,
                0x71, 0xef, 0xbb, 0x47, 0xd4, 0xca, 0xee, 0xd5, 0xe6, 0xd6, 0x33, 0x80, 0x5d, 0x2d,
                0x32, 0x3e, 0x6f, 0xd8, 0x1b, 0x46, 0x84, 0xb9, 0x3a, 0x26, 0x77, 0xd4, 0x5e, 0x74,
                0x21, 0xc2, 0xc6, 0xae, 0xa2, 0x59, 0xb8, 0x55, 0xa6, 0x98, 0xfd, 0x7d, 0x13, 0x47,
                0x7a, 0x1f, 0xe5, 0x3e, 0x5a, 0x4a, 0x61, 0x97, 0xdb, 0xec, 0x5c, 0xe9, 0x5f, 0x50,
                0x5b, 0x52, 0x0b, 0xcd, 0x95, 0x70, 0xc4, 0xa8, 0x26, 0x5a, 0x7e, 0x01, 0xf8, 0x9c,
                0x0c, 0x00, 0x2c, 0x59, 0xbf, 0xec, 0x6c, 0xd4, 0xa5, 0xc1, 0x09, 0x25, 0x89, 0x53,
                0xee, 0x5e, 0xe7, 0x0c, 0xd5, 0x77, 0xee, 0x21, 0x7a, 0xf2, 0x1f, 0xa7, 0x01, 0x78,
                0xf0, 0x94, 0x6c, 0x9b, 0xf6, 0xca, 0x87, 0x51, 0x79, 0x34, 0x79, 0xf6, 0xb5, 0x37,
                0x73, 0x7e, 0x40, 0xb6, 0xed, 0x28, 0x51, 0x1d, 0x8a, 0x2d, 0x7e, 0x73, 0xeb, 0x75,
                0xf8, 0xda, 0xac, 0x91, 0x2f, 0xf9, 0x06, 0xe0, 0xab, 0x95, 0x5b, 0x08, 0x3b, 0xac,
                0x45, 0xa8, 0xe5, 0xe9, 0xb7, 0x44, 0xc8, 0x50, 0x6f, 0x37, 0xe9, 0xb4, 0xe7, 0x49,
                0xa1, 0x84, 0xb3, 0x0f, 0x43, 0xeb, 0x18, 0x8d, 0x85, 0x5f, 0x1b, 0x70, 0xd7, 0x1f,
                0xf3, 0xe5, 0x0c, 0x53, 0x7a, 0xc1, 0xb0, 0xf8, 0x97, 0x4f, 0x0f, 0xe1, 0xa6, 0xad,
                0x29, 0x5b, 0xa4, 0x2f, 0x6a, 0xec, 0x74, 0xd1, 0x23, 0xa7, 0xab, 0xed, 0xde, 0x6e,
                0x2c, 0x07, 0x11, 0xca, 0xb3, 0x6b, 0xe5, 0xac, 0xb1, 0xa5, 0xa1, 0x1a, 0x4b, 0x1d,
                0xb0, 0x8b, 0xa6, 0x98, 0x2e, 0xfc, 0xcd, 0x71, 0x69, 0x29, 0xa7, 0x74, 0x1c, 0xfc,
                0x63, 0xaa, 0x44, 0x35, 0xe0, 0xb6, 0x9a, 0x90, 0x63, 0xe8, 0x80, 0x79, 0x5c, 0x3d,
                0xc5, 0xef, 0x32, 0x72, 0xe1, 0x1c, 0x49, 0x7a, 0x91, 0xac, 0xf6, 0x99, 0xfe, 0xfe,
                0xe2, 0x06, 0x22, 0x7a, 0x44, 0xc9, 0xfb, 0x35, 0x9f, 0xd5, 0x6a, 0xc0, 0xa9, 0xa7,
                0x5a, 0x74, 0x3c, 0xff, 0x68, 0x62, 0xf1, 0x7d, 0x72, 0x59, 0xab, 0x07, 0x52, 0x16,
                0xc0, 0x69, 0x95, 0x11, 0x64, 0x3b, 0x64, 0x39
            ]
        )
    }

    #[test]
    fn input_very_large() {
        let input = [
            0x83, 0xaf, 0x34, 0x27, 0x9c, 0xcb, 0x54, 0x30, 0xfe, 0xbe, 0xc0, 0x7a, 0x81, 0x95,
            0x0d, 0x30, 0xf4, 0xb6, 0x6f, 0x48, 0x48, 0x26, 0xaf, 0xee, 0x74, 0x56, 0xf0, 0x07,
            0x1a, 0x51, 0xe1, 0xbb, 0xc5, 0x55, 0x70, 0xb5, 0xcc, 0x7e, 0xc6, 0xf9, 0x30, 0x9c,
            0x17, 0xbf, 0x5b, 0xef, 0xdd, 0x7c, 0x6b, 0xa6, 0xe9, 0x68, 0xcf, 0x21, 0x8a, 0x2b,
            0x34, 0xbd, 0x5c, 0xf9, 0x27, 0xab, 0x84, 0x6e, 0x38, 0xa4, 0x0b, 0xbd, 0x81, 0x75,
            0x9e, 0x9e, 0x33, 0x38, 0x10, 0x16, 0xa7, 0x55, 0xf6, 0x99, 0xdf, 0x35, 0xd6, 0x60,
            0x00, 0x7b, 0x5e, 0xad, 0xf2, 0x92, 0xfe, 0xef, 0xb7, 0x35, 0x20, 0x7e, 0xbf, 0x70,
            0xb5, 0xbd, 0x17, 0x83, 0x4f, 0x7b, 0xfa, 0x0e, 0x16, 0xcb, 0x21, 0x9a, 0xd4, 0xaf,
            0x52, 0x4a, 0xb1, 0xea, 0x37, 0x33, 0x4a, 0xa6, 0x64, 0x35, 0xe5, 0xd3, 0x97, 0xfc,
            0x0a, 0x06, 0x5c, 0x41, 0x1e, 0xbb, 0xce, 0x32, 0xc2, 0x40, 0xb9, 0x04, 0x76, 0xd3,
            0x07, 0xce, 0x80, 0x2e, 0xc8, 0x2c, 0x1c, 0x49, 0xbc, 0x1b, 0xec, 0x48, 0xc0, 0x67,
            0x5e, 0xc2, 0xa6, 0xc6, 0xf3, 0xed, 0x3e, 0x5b, 0x74, 0x1d, 0x13, 0x43, 0x70, 0x95,
            0x70, 0x7c, 0x56, 0x5e, 0x10, 0xd8, 0xa2, 0x0b, 0x8c, 0x20, 0x46, 0x8f, 0xf9, 0x51,
            0x4f, 0xcf, 0x31, 0xb4, 0x24, 0x9c, 0xd8, 0x2d, 0xce, 0xe5, 0x8c, 0x0a, 0x2a, 0xf5,
            0x38, 0xb2, 0x91, 0xa8, 0x7e, 0x33, 0x90, 0xd7, 0x37, 0x19, 0x1a, 0x07, 0x48, 0x4a,
            0x5d, 0x3f, 0x3f, 0xb8, 0xc8, 0xf1, 0x5c, 0xe0, 0x56, 0xe5, 0xe5, 0xf8, 0xfe, 0xbe,
            0x5e, 0x1f, 0xb5, 0x9d, 0x67, 0x40, 0x98, 0x0a, 0xa0, 0x6c, 0xa8, 0xa0, 0xc2, 0x0f,
            0x57, 0x12, 0xb4, 0xcd, 0xe5, 0xd0, 0x32, 0xe9, 0x2a, 0xb8, 0x9f, 0x0a, 0xe1,
        ];
        let result = shake128::from(&input, 512);
        assert_eq!(
            result,
            [
                0xc6, 0xd3, 0x29, 0x6e, 0xcc, 0xe0, 0x0f, 0x96, 0xe8, 0xe0, 0x22, 0x4f, 0xc0, 0x94,
                0x27, 0x9a, 0xfd, 0xc5, 0x1f, 0x4d, 0x65, 0x79, 0x0b, 0x7d, 0xe6, 0x61, 0x2a, 0x53,
                0x6d, 0x16, 0xdc, 0xa5, 0x7e, 0xdf, 0x5a, 0xf5, 0x3b, 0x7d, 0xcf, 0xf9, 0x89, 0x10,
                0xf8, 0xc4, 0x1a, 0xf5, 0x97, 0x69, 0x2c, 0x5b, 0x95, 0x90, 0xb7, 0xeb, 0xd7, 0x12,
                0x07, 0x6a, 0x74, 0xba, 0x99, 0x23, 0xc3, 0x64, 0xe0, 0x42, 0x28, 0x6f, 0x75, 0x41,
                0x43, 0xb2, 0xf1, 0xe0, 0x0c, 0x47, 0xd4, 0xd0, 0x1e, 0xd6, 0xa0, 0x8f, 0xc3, 0xb6,
                0x29, 0x18, 0xd4, 0xc7, 0xfc, 0x8a, 0x5a, 0xfe, 0xad, 0xf7, 0xb8, 0x3a, 0x02, 0xac,
                0xbf, 0xda, 0xd3, 0x03, 0x2d, 0x72, 0xc6, 0x0e, 0x5f, 0xf3, 0x42, 0xae, 0x93, 0x76,
                0xc6, 0x0c, 0xac, 0x09, 0x47, 0x80, 0xd9, 0xf0, 0xa6, 0xfc, 0xfe, 0x63, 0x49, 0x6a,
                0x1f, 0xc6, 0x60, 0xa3, 0x3e, 0x11, 0x11, 0xff, 0x44, 0x1b, 0xdb, 0x60, 0x0b, 0x37,
                0xa3, 0x32, 0x56, 0xa3, 0x5e, 0x86, 0xcb, 0x24, 0x5c, 0xe8, 0xdd, 0x29, 0x51, 0xe6,
                0xb4, 0xc7, 0xc9, 0x6c, 0x85, 0x61, 0x20, 0x7d, 0x40, 0x2d, 0x14, 0x39, 0x02, 0xf0,
                0x85, 0x19, 0x10, 0x84, 0xee, 0x39, 0xe8, 0xfb, 0x47, 0x29, 0x65, 0xf5, 0x1c, 0x6e,
                0x55, 0x6c, 0xf4, 0xea, 0xe5, 0x5c, 0x54, 0x0a, 0xdc, 0xed, 0xeb, 0x9e, 0x77, 0x69,
                0x9c, 0x16, 0x1a, 0x88, 0xdd, 0x07, 0x09, 0x32, 0x51, 0xdb, 0xf4, 0x03, 0xe7, 0xa2,
                0x6e, 0xa6, 0xff, 0x93, 0xb2, 0xe5, 0xc6, 0x1e, 0x5c, 0x05, 0x38, 0xcc, 0x29, 0xd6,
                0x9d, 0xe8, 0x06, 0xd9, 0x95, 0xc9, 0xbb, 0x59, 0xb5, 0x29, 0x15, 0xa6, 0x1b, 0x9d,
                0xaa, 0xa3, 0xb2, 0x1f, 0xc3, 0x25, 0xae, 0x7e, 0x1d, 0x59, 0x23, 0xd7, 0xe2, 0xcd,
                0xb4, 0xf7, 0x1e, 0x9c, 0x1e, 0x9d, 0xeb, 0x33, 0x19, 0x16, 0xf0, 0x9b, 0x22, 0xa3,
                0x4c, 0xa7, 0x0f, 0xd2, 0x04, 0x10, 0xee, 0xdb, 0x22, 0x11, 0x8d, 0x60, 0x68, 0x70,
                0x18, 0x8b, 0xbb, 0x98, 0x00, 0x44, 0x5b, 0x13, 0x6f, 0xfe, 0xf3, 0xd7, 0x53, 0x9b,
                0x71, 0x04, 0xee, 0xd3, 0x6e, 0x3e, 0x66, 0x3b, 0x51, 0x67, 0xa5, 0x64, 0x9b, 0x0f,
                0xd2, 0x01, 0x34, 0x24, 0x15, 0x3b, 0x92, 0xbf, 0x52, 0x08, 0x45, 0x97, 0x2c, 0x14,
                0x6f, 0x8e, 0x15, 0x67, 0x0b, 0xe4, 0x0c, 0xf2, 0xef, 0x1e, 0x73, 0xe2, 0x3e, 0x40,
                0x4f, 0x17, 0x53, 0x83, 0x3a, 0xbe, 0xb1, 0x11, 0x32, 0x7e, 0x86, 0x29, 0x04, 0xc7,
                0xca, 0x96, 0x9f, 0x58, 0x20, 0xb4, 0x1c, 0x64, 0x84, 0xaf, 0xce, 0x63, 0x74, 0xc7,
                0x26, 0x20, 0xc1, 0xb0, 0xdf, 0x72, 0xc0, 0x43, 0xc1, 0xbe, 0xf6, 0xb3, 0x3e, 0xb1,
                0x7a, 0x64, 0xb0, 0xfb, 0xe4, 0x8d, 0x68, 0xe6, 0x0f, 0x90, 0xcf, 0xa6, 0x69, 0x21,
                0x4f, 0x96, 0x70, 0x97, 0x77, 0xb9, 0xa2, 0x78, 0xb6, 0x5f, 0x19, 0x79, 0x56, 0x34,
                0x53, 0x95, 0x00, 0x82, 0x72, 0xe6, 0xcc, 0x3d, 0xdf, 0x43, 0xdf, 0x36, 0xb3, 0x9e,
                0x49, 0x18, 0x97, 0x32, 0x3c, 0xea, 0x03, 0xb8, 0x8d, 0x2f, 0xb8, 0xfb, 0x9f, 0x9f,
                0x12, 0x19, 0xe9, 0x51, 0xf4, 0xcd, 0x65, 0x2a, 0xa2, 0x8c, 0x1c, 0xd0, 0x3a, 0x36,
                0x9d, 0x85, 0xc7, 0xec, 0xee, 0x4c, 0x30, 0x16, 0xc8, 0x98, 0x85, 0x37, 0x3a, 0xca,
                0xbc, 0x20, 0xe4, 0x0d, 0xea, 0x4b, 0xcf, 0xa7, 0xb4, 0x99, 0x94, 0x1d, 0x8b, 0xd0,
                0x67, 0x38, 0xa7, 0x1f, 0x3b, 0x40, 0xed, 0x89, 0xff, 0xe8, 0x5c, 0x7c, 0x84, 0xec,
                0xf5, 0xf6, 0x44, 0xcf, 0x1f, 0x3a, 0x43, 0x4d, 0x2b, 0x12, 0xea, 0x33, 0x39, 0x30,
                0x33, 0x53, 0x89, 0x0b, 0x3c, 0x4c, 0x55, 0x34
            ]
        )
    }
}
